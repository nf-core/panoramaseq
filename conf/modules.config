/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: MULTIQC {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //cutadapt trim1 (local panorama version that handles single/paired-end properly)
    withName: CUTADAPT_PANORAMA {
        ext.args = '-q 10 -a T{16} --minimum-length 25 --pair-filter=first --overlap 8 -e 0.1'
        ext.prefix = { "${meta.id}.cutadapt" }
    }
    //cutadapt trim1 (legacy - keeping for compatibility)
    withName: CUTADAPT {
        ext.args = '-q 10 -a T{16} --minimum-length 25 --pair-filter=first --overlap 8 -e 0.1'
        ext.prefix = { "${meta.id}.cutadapt" }
    }
    //cutadapt trim2 (advanced, R2-only, piped)
    withName: CUTADAPT_ADV {
        ext.args = '--quiet -e 0.15 -O 8 -m 25 -A AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC --pair-filter=any --action=trim --cores=2 --interleaved --trim-n --nextseq-trim=20 -j 2'
        ext.prefix = { "${meta.id}.cutadapt.adv" }
    }
    //cutadapt trim2 (advanced, R2-only, piped)
    withName: CUTADAPT_ADV_PIPE {
        ext.prefix = { "${meta.id}.cutadapt.adv" }
    }
    //seqtk
    withName: SEQTK_SAMPLE {
        ext.args = '-s100'
        ext.prefix = { "${meta.id}.sampled" }
    }
    // UMITOOLS_EXTRACT
    withName: UMITOOLS_EXTRACT {
        ext.args   = { [
                params.umitools_extract_method                  ? "--extract-method=${params.umitools_extract_method}" : '',
                params.umitools_bc_pattern                      ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                params.umitools_bc_pattern2 && !meta.single_end ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : '',
                params.umitools_umi_separator                   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
        ].join(' ').trim() }
    }
    //barcode decoding batch
    withName: Decode_batch {
        ext.prefix = { "${meta.id}.decode" }
        // container = 'library://francops1722/panoramaseq/pytorch_cuda:latest' // Disabled: use system PyTorch module instead
    }
    withName: SAMTOOLS_SORT_LOCAL {
        ext.prefix = { "${meta.id}.assigned_sorted" }
    }
    //star alignment
    withName: STAR_ALIGN_LOCAL {
        ext.args = [
            '--outFilterType BySJout',
            '--outSAMunmapped Within',
            '--outFilterMultimapNmax 200',
            '--alignSJoverhangMin 8',
            '--alignSJDBoverhangMin 1',
            '--outFilterMismatchNmax 999',
            '--outFilterMismatchNoverLmax 0.6',
            '--alignIntronMin 20',
            '--alignIntronMax 1000000',
            '--alignMatesGapMax 1000000',
            '--limitOutSJcollapsed 5000000',
            '--limitIObufferSize 200000000 200000000',
            '--outSAMattributes NH HI NM MD',
            '--outSAMtype BAM SortedByCoordinate',
            '--limitBAMsortRAM 2000000000'
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.star" }
    }
    withName: index1 {
        publishDir = [
            path: { "${params.outdir}/star" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: index2 {
        publishDir = [
            path: { "${params.outdir}/samtools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

     withName: UMI_count {
        publishDir = [
            path: { "${params.outdir}/UMI_counts" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: tsv_to_h5ad {
        publishDir = [
            path: { "${params.outdir}/h5ad/intermediate" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false // Don't publish intermediate H5AD files - only publish validated ones
        ]
    }

    withName: tsv_to_h5ad_single {
        publishDir = [
            path: { "${params.outdir}/h5ad/intermediate" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false // Don't publish intermediate H5AD files - only publish validated ones
        ]
    }

    withName: CHECK_H5AD {
        publishDir = [
            path: { "${params.outdir}/h5ad" },
            mode: params.publish_dir_mode,
            pattern: "*.{h5ad,log}",  // Publish both H5AD and log files
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}