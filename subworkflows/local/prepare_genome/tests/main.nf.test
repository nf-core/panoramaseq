nextflow_workflow {

    name "Test Workflow PREPARE_GENOME"
    script "../main.nf"
    workflow "PREPARE_GENOME"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "prepare_genome"
    tag "gunzip"
    tag "star_genomegenerate"

    test("prepare_genome - uncompressed files") {

        when {
            workflow {
                """
                input[0] = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1] = file(params.pipelines_testdata_base_path + 'reference/genes.gtf', checkIfExists: true)
                input[2] = null // no additional_fasta
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fasta },
                { assert workflow.out.gtf },
                { assert workflow.out.index },
                { assert workflow.out.versions },
                { assert path(workflow.out.index.get(0)).exists() }
            )
        }
    }

    test("prepare_genome - compressed fasta") {

        when {
            workflow {
                """
                input[0] = file(params.pipelines_testdata_base_path + 'reference/genome.fasta.gz', checkIfExists: true)
                input[1] = file(params.pipelines_testdata_base_path + 'reference/genes.gtf', checkIfExists: true)
                input[2] = null // no additional_fasta
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fasta },
                { assert workflow.out.gtf },
                { assert workflow.out.index },
                { assert workflow.out.versions },
                { assert path(workflow.out.index.get(0)).exists() }
            )
        }
    }

    test("prepare_genome - compressed gtf") {

        when {
            workflow {
                """
                input[0] = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1] = file(params.pipelines_testdata_base_path + 'reference/genes.gtf.gz', checkIfExists: true)
                input[2] = null // no additional_fasta
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fasta },
                { assert workflow.out.gtf },
                { assert workflow.out.index },
                { assert workflow.out.versions },
                { assert path(workflow.out.index.get(0)).exists() }
            )
        }
    }

    test("prepare_genome - stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1] = file(params.pipelines_testdata_base_path + 'reference/genes.gtf', checkIfExists: true)
                input[2] = null // no additional_fasta
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.fasta },
                { assert workflow.out.gtf },
                { assert workflow.out.index },
                { assert workflow.out.versions }
            )
        }
    }
}
