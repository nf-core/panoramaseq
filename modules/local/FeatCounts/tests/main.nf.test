nextflow_process {

    name "Test Process FEATURECOUNTS_CUSTOM"
    script "../main.nf"
    process "FEATURECOUNTS_CUSTOM"
    config "./nextflow.config"
    tag "modules"
    tag "modules_local"
    tag "featurecounts_custom"

    test("sarscov2 [bam] - single end") {

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.single_end.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gtf", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.counts != null },
                { assert process.out.summary != null },
                { assert process.out.annotated_bam != null },
                { assert snapshot(process.out.versions).match("single_end_versions") },
                { assert file(process.out.counts.get(0).get(1)).exists() },
                { assert file(process.out.summary.get(0).get(1)).exists() },
                { assert file(process.out.annotated_bam.get(0).get(1)).exists() }
            )
        }
    }

    test("sarscov2 [bam] - paired end") {

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gtf", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.counts != null },
                { assert process.out.summary != null },
                { assert process.out.annotated_bam != null },
                { assert snapshot(process.out.versions).match("paired_end_versions") },
                { assert file(process.out.counts.get(0).get(1)).exists() },
                { assert file(process.out.summary.get(0).get(1)).exists() },
                { assert file(process.out.annotated_bam.get(0).get(1)).exists() },
                { assert process.out.counts.get(0).get(1) ==~ ".*\\.featureCounts\\.tsv" },
                { assert process.out.summary.get(0).get(1) ==~ ".*\\.featureCounts\\.tsv\\.summary" },
                { assert process.out.annotated_bam.get(0).get(1) ==~ ".*\\.featureCounts\\.bam" }
            )
        }
    }

    test("sarscov2 [bam] - stub") {

        options "-stub"

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/bam/test.single_end.bam", checkIfExists: true),
                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gtf", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
