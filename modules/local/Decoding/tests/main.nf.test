nextflow_process {

    name "Test Process Decode_batch"
    script "../main.nf"
    process "Decode_batch"
    tag "modules"
    tag "modules_local"
    tag "decode_batch"

    test("decode batch stub test") {

        options "-stub"

        when {
            params {
                outdir = "$outputDir"
                panoramaseq_testdata_base_path = "https://raw.githubusercontent.com/francops1722/test-datasets/panoramaseq/testdata/"
            }
            process {
                """
                input[0] = [
                    [ 
                        id: 'test_decode', 
                        single_end: false,
                        N_barcodes: 5,
                        len_barcode: 36,
                        Ntriage: 3,
                        Nthresh: 2
                    ],
                    [
                        file(params.panoramaseq_testdata_base_path + 'decode/S09.umi_extract_1.fastq.gz', checkIfExists: true),
                        file(params.panoramaseq_testdata_base_path + 'decode/S09.umi_extract_2.fastq.gz', checkIfExists: true)
                    ]
                ]
                input[1] = file(params.panoramaseq_testdata_base_path + 'barcodes_coords.csv', checkIfExists: true)
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert process.out.reads != null },
                { assert process.out.reads.get(0).get(1).size() == 2 },
                { assert snapshot(process.out.versions).match() }
            )
        }
    }

    test("decode batch real processing") {

        when {
            params {
                outdir = "$outputDir"
                panoramaseq_testdata_base_path = "https://raw.githubusercontent.com/francops1722/test-datasets/panoramaseq/testdata/"
                gpus = 1  // Use only 1 GPU for testing
            }
            process {
                """
                input[0] = [
                    [ 
                        id: 'S09_real', 
                        single_end: false,
                        N_barcodes: 34500,  // Reduced for faster testing
                        len_barcode: 36,
                        Ntriage: 100,     // Reduced for faster testing
                        Nthresh: 9
                    ],
                    [
                        file(params.panoramaseq_testdata_base_path + 'decode/S09.umi_extract_1.fastq.gz', checkIfExists: true),
                        file(params.panoramaseq_testdata_base_path + 'decode/S09.umi_extract_2.fastq.gz', checkIfExists: true)
                    ]
                ]
                input[1] = file(params.panoramaseq_testdata_base_path + 'barcodes_coords.csv', checkIfExists: true)
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert process.out.reads != null },
                { assert process.out.reads.get(0).get(1).size() == 2 },
                { assert process.out.reads.get(0).get(1).get(0) ==~ ".*\\.R1\\.fastq\\.gz" },
                { assert process.out.reads.get(0).get(1).get(1) ==~ ".*\\.R2\\.fastq\\.gz" },
                { assert process.out.versions != null },
                { assert snapshot(process.out.versions).match("versions_real") }
            )
        }
    }
}
