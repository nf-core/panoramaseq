nextflow_process {

    name "Test Process tsv_to_h5ad_single"
    script "../main.nf"
    process "tsv_to_h5ad_single"
    tag "modules"
    tag "modules_local"
    tag "tsv_to_h5ad_single"
    tag "make_h5ad_single"

    test("tsv_to_h5ad_single - stub") {

        options "-stub"

        when {
            params {
                outdir = "$outputDir"
                panoramaseq_testdata_base_path = "https://raw.githubusercontent.com/francops1722/test-datasets/panoramaseq/testdata/"
            }
            process {
                """
                input[0] = [
                    [ id: 'S09_single' ],
                    file(params.panoramaseq_testdata_base_path + 'counts/S09_counts.tsv.gz', checkIfExists: true),
                    file(params.panoramaseq_testdata_base_path + 'barcodes_coords.csv', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert process.out.h5ad != null },
                { assert process.out.h5ad.get(0).get(1) ==~ ".*\\.h5ad" },
                { assert process.out.versions != null },
                { assert snapshot(process.out.versions).match() }
            )
        }
    }

    test("tsv_to_h5ad_single - S09 sample") {

        when {
            params {
                outdir = "$outputDir"
                panoramaseq_testdata_base_path = "https://raw.githubusercontent.com/francops1722/test-datasets/panoramaseq/testdata/"
            }
            process {
                """
                input[0] = [
                    [ id: 'S09' ],
                    file(params.panoramaseq_testdata_base_path + 'counts/S09_counts.tsv.gz', checkIfExists: true),
                    file(params.panoramaseq_testdata_base_path + 'barcodes_coords.csv', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert process.out.h5ad != null },
                { assert process.out.h5ad.get(0).get(1) ==~ ".*\\.h5ad" },
                { assert file(process.out.h5ad.get(0).get(1)).exists() },
                { assert process.out.versions != null },
                { assert snapshot(process.out.h5ad, process.out.versions).match("S09_sample") }
            )
        }
    }

    test("tsv_to_h5ad_single - S10 sample") {

        when {
            params {
                outdir = "$outputDir"
                panoramaseq_testdata_base_path = "https://raw.githubusercontent.com/francops1722/test-datasets/panoramaseq/testdata/"
            }
            process {
                """
                input[0] = [
                    [ id: 'S10' ],
                    file(params.panoramaseq_testdata_base_path + 'counts/S10_counts.tsv.gz', checkIfExists: true),
                    file(params.panoramaseq_testdata_base_path + 'barcodes_coords.csv', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert process.out.h5ad != null },
                { assert process.out.h5ad.get(0).get(1) ==~ ".*\\.h5ad" },
                { assert file(process.out.h5ad.get(0).get(1)).exists() },
                { assert process.out.versions != null },
                { assert snapshot(process.out.h5ad, process.out.versions).match("S10_sample") }
            )
        }
    }

    test("tsv_to_h5ad_single - custom prefix") {

        when {
            params {
                outdir = "$outputDir"
                panoramaseq_testdata_base_path = "https://raw.githubusercontent.com/francops1722/test-datasets/panoramaseq/testdata/"
            }
            process {
                """
                input[0] = [
                    [ id: 'custom_test' ],
                    file(params.panoramaseq_testdata_base_path + 'counts/S09_counts.tsv.gz', checkIfExists: true),
                    file(params.panoramaseq_testdata_base_path + 'barcodes_coords.csv', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert process.out.h5ad != null },
                { assert process.out.h5ad.get(0).get(1) ==~ ".*custom_test\\.h5ad" },
                { assert file(process.out.h5ad.get(0).get(1)).exists() },
                { assert process.out.versions != null },
                { assert snapshot(process.out.h5ad, process.out.versions).match("custom_prefix") }
            )
        }
    }
}
